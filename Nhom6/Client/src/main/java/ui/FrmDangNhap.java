package ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import dto.Post.PostLogin;
import retrofit.RetrofitClientCreator;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import service.AuthService;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.Keymap;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Locale;

public class FrmDangNhap extends JFrame implements ActionListener {
    private static JFrame frame;
    private JPanel mainPanel;
    private JTextField txtUserName;
    private JButton btnNhanVien;
    private JButton btnAdmin;
    private JPasswordField txtPassword;
    private JPanel pnNorth;
    private JPanel pnCenter;
    private AuthService authService;

    public FrmDangNhap() {
        setContentPane(mainPanel);
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.setSize(500, 400);
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        authService = RetrofitClientCreator.getClient().create(AuthService.class);
        Keymap keymap = txtPassword.getKeymap();
        KeyStroke keystroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false);
        keymap.removeKeyStrokeBinding(keystroke);
        this.getRootPane().setDefaultButton(btnAdmin);
        btnAdmin.addActionListener(this);
        btnNhanVien.addActionListener(this);
    }

    public static void main(String[] args) {
        FrmDangNhap frmDangNhap = new FrmDangNhap();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object obj = e.getSource();
        if (obj.equals(btnNhanVien)) {
            FrmTONG frmTONG = new FrmTONG("nv");
            frmTONG.pack();
            frmTONG.setLocationRelativeTo(null);
            frmTONG.setVisible(true);
            this.dispose();

        } else if (obj.equals(btnAdmin)) {
            String user = txtUserName.getText().toString().trim();
            String password = String.valueOf(txtPassword.getPassword());
            PostLogin postLogin = new PostLogin(user, password);
            authService.login(postLogin).enqueue(new Callback<Integer>() {
                @Override
                public void onResponse(Call<Integer> call, Response<Integer> response) {
                    try {
                        if (response.body() == 1) {
                            JOptionPane.showMessageDialog(null, "Đăng nhập thành công ");
                            FrmTONG frmTONG = new FrmTONG("am");
                            frmTONG.setVisible(true);
                            dispose();
                        }
                        if (response.body() == 0) {
                            JOptionPane.showMessageDialog(null, "Đăng nhập thất bại ");

                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Đăng nhập thất bại ");

                    }

                }

                @Override
                public void onFailure(Call<Integer> call, Throwable t) {

                }
            });
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        pnNorth = new JPanel();
        pnNorth.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        pnNorth.setBackground(new Color(-13322051));
        mainPanel.add(pnNorth, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Wingdings 3", Font.BOLD, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-16185079));
        label1.setText("ĐĂNG NHẬP");
        pnNorth.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        pnNorth.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        pnNorth.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pnCenter = new JPanel();
        pnCenter.setLayout(new GridLayoutManager(3, 4, new Insets(10, 20, 10, 20), -1, -1));
        pnCenter.setBackground(new Color(-8683131));
        mainPanel.add(pnCenter, BorderLayout.CENTER);
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, Font.BOLD, 14, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-16185079));
        label2.setText("Tài khoản");
        pnCenter.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, Font.BOLD, 14, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setForeground(new Color(-16185079));
        label3.setText("Mật khẩu");
        pnCenter.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtUserName = new JTextField();
        txtUserName.setOpaque(false);
        txtUserName.setText("admin");
        pnCenter.add(txtUserName, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        btnNhanVien = new JButton();
        Font btnNhanVienFont = this.$$$getFont$$$("Wingdings 3", Font.BOLD, 14, btnNhanVien.getFont());
        if (btnNhanVienFont != null) btnNhanVien.setFont(btnNhanVienFont);
        btnNhanVien.setForeground(new Color(-8683131));
        btnNhanVien.setText("Đăng nhập Nhân viên");
        pnCenter.add(btnNhanVien, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnAdmin = new JButton();
        Font btnAdminFont = this.$$$getFont$$$("Wingdings 3", Font.BOLD, 14, btnAdmin.getFont());
        if (btnAdminFont != null) btnAdmin.setFont(btnAdminFont);
        btnAdmin.setForeground(new Color(-8683131));
        btnAdmin.setText("Đăng nhập Admin");
        pnCenter.add(btnAdmin, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtPassword = new JPasswordField();
        txtPassword.setText("admin");
        pnCenter.add(txtPassword, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        final Spacer spacer3 = new Spacer();
        pnCenter.add(spacer3, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        pnCenter.add(spacer4, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
